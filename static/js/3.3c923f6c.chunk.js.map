{"version":3,"sources":["components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["DialogsItem","props","path","id","to","name","Messages","message","AddMessageForm","onSendMessageClick","onSubmit","values","newMessage","render","handleSubmit","form","event","a","reset","component","TextArea","placeholder","validate","composeValidators","maxLength","DialogsContainer","compose","connect","state","dialogsPage","dispatch","SendMessage","sendMessageAC","withAuthRedirect","dialogsElements","dialogs","map","messages"],"mappings":"wPAMaA,EAAyC,SAACC,GAEnD,IAAIC,EAAI,mBAAeD,EAAME,IAE7B,OACI,8BACI,cAAC,IAAD,CAASC,GAAIF,EAAb,SAAoBD,EAAMI,UCPzBC,EAAuC,SAACL,GAEjD,OACI,8BACKA,EAAMM,W,wBCsCbC,EAA0C,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,mBAC9C,OACI,cAAC,IAAD,CACIC,SAAU,SAAAC,GACNF,EAAmBE,EAAOC,aAE9BC,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAhB,OACJ,uBAAML,SAAQ,uCAAE,WAAMM,GAAN,SAAAC,EAAA,sEACNH,EAAaE,GADP,OAEZD,EAAKG,QAFO,2CAAF,sDAAd,UAII,8BACI,cAAC,IAAD,CAAOC,UAAWC,IACXf,KAAM,aACNgB,YAAa,qBACbC,SAAUC,YAAkBC,YAAU,SAEjD,8BACI,mD,wBC3CXC,EAAmBC,YAC5BC,aAfkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACxB,GACVuB,EAASE,YAAczB,SAMe0B,IADlBP,EDTT,SAACzB,GAEpB,IAAI2B,EAAQ3B,EAAM4B,YAEdK,EAAkBN,EAAMO,QAAQC,KAAI,SAACD,GAAD,OAA0B,cAAC,EAAD,CAAahC,GAAIgC,EAAQhC,GAEZE,KAAM8B,EAAQ9B,MADT8B,EAAQhC,OAGxFkC,EAAWT,EAAMS,SAASD,KAAI,SAACC,GAAD,OAA4B,cAAC,EAAD,CAAUlC,GAAIkC,EAASlC,GAEbI,QAAS8B,EAAS9B,SADb8B,EAASlC,OAMtF,OACI,gCACI,8BACI,8BAAM+B,MAEV,gCACI,8BAAMG,IACN,cAAC,EAAD,CACI5B,mBAXS,SAACF,GACtBN,EAAM8B,YAAYxB","file":"static/js/3.3c923f6c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/reducers/dialogs-reducer\";\r\n\r\ntype DialogItemProps = DialogsType;\r\n\r\nexport const DialogsItem: React.FC<DialogItemProps> = (props) => {\r\n\r\n    let path = `/dialogs/${props.id}`;\r\n\r\n    return (\r\n        <div>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {MessagesType} from \"../../../redux/reducers/dialogs-reducer\";\r\n\r\ntype MessagePropsType = MessagesType;\r\n\r\nexport const Messages: React.FC<MessagePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {dialogsStateType, DialogsType, MessagesType} from \"../../redux/reducers/dialogs-reducer\";\r\nimport {Field, Form} from 'react-final-form';\r\nimport {TextArea} from \"../common/FormControls/FormControls\";\r\nimport {composeValidators, maxLength} from \"../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    SendMessage: (message: string) => void\r\n    dialogsPage: dialogsStateType\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((dialogs: DialogsType) => <DialogsItem id={dialogs.id}\r\n                                                                                   key={dialogs.id}\r\n                                                                                   name={dialogs.name}/>)\r\n\r\n    let messages = state.messages.map((messages: MessagesType) => <Messages id={messages.id}\r\n                                                                            key={messages.id}\r\n                                                                            message={messages.message}/>)\r\n\r\n    let onSendMessageClick = (message: string) => {\r\n        props.SendMessage(message)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>{dialogsElements}</div>\r\n            </div>\r\n            <div>\r\n                <div>{messages}</div>\r\n                <AddMessageForm\r\n                    onSendMessageClick={onSendMessageClick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Add Message form component\r\ntype FormPropsType = {\r\n    onSendMessageClick: (message: string) => void\r\n}\r\n\r\nconst AddMessageForm: React.FC<FormPropsType> = ({onSendMessageClick}) => {\r\n    return (\r\n        <Form\r\n            onSubmit={values => {\r\n                onSendMessageClick(values.newMessage)\r\n            }}\r\n            render={({handleSubmit, form}) => (\r\n                <form onSubmit={async event => {\r\n                    await handleSubmit(event)\r\n                    form.reset()\r\n                }}>\r\n                    <div>\r\n                        <Field component={TextArea}\r\n                               name={'newMessage'}\r\n                               placeholder={'Enter your message'}\r\n                               validate={composeValidators(maxLength(15))}/>\r\n                    </div>\r\n                    <div>\r\n                        <button>Send</button>\r\n                    </div>\r\n                </form>\r\n            )}>\r\n        </Form>\r\n    )\r\n}","import React from 'react';\r\nimport {sendMessageAC} from \"../../redux/reducers/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        SendMessage: (message: string) => {\r\n            dispatch(sendMessageAC(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n\r\n// Compose is alternative to writing the hoc hell, like in the line below.\r\n// export const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));"],"sourceRoot":""}